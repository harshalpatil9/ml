Classify the email using the binary classification method. 
Email Spam detection has two states: a) Normal State – Not Spam,
 b) Abnormal State – Spam. Use K-Nearest Neighbors and Support Vector Machine
 for classification. Analyze their performance. 
 Dataset link: The emails.csv dataset on the Kaggle https://www.kaggle.com/datasets/balaka18/email-spam-classification-dataset-csv
 
 import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier  
from sklearn import metrics

df = pd.read_csv('../input/email-spam-classification-dataset-csv/emails.csv')
df

df.shape

df.drop(columns='Email No.', inplace=True)
df

df.columns

df.Prediction.unique()

df['Prediction'] = df['Prediction'].replace({0:'Not spam', 1:'Spam'})

df

KNN

X = df.drop(columns='Prediction',axis = 1)
Y = df['Prediction']

X.columns

Y.head()

x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=1)

KN = KNeighborsClassifier
knn = KN(n_neighbors=7)
knn.fit(x_train, y_train)
y_pred = knn.predict(x_test)

print("Prediction: \n")
print(y_pred)

# Accuracy
M = metrics.accuracy_score(y_test,y_pred)
print("KNN accuracy: ", M)

C = metrics.confusion_matrix(y_test,y_pred)
print("Confusion matrix: ", C)

SVM Classifier

model = SVC(C = 1)   # cost C = 1
model.fit(x_train, y_train)
y_pred = model.predict(x_test)      # predict

kc = metrics.confusion_matrix(y_test, y_pred)
print("SVM accuracy: ", kc)

//different

ASSIGNMENT NO 3
Classify the email using the binary classification method. Email Spam detection has two states: a) Normal State – Not Spam, b) Abnormal State – Spam. Use K-Nearest Neighbors and Support Vector Machine for classification. Analyze their performance. Dataset link: The emails.csv dataset on the Kaggle https://www.kaggle.com/datasets/balaka18/email-spam-classification-dataset-csv

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

df=pd.read_csv('emails.csv')

X = df.iloc[:, 1:-1].values
y = df.iloc[:, -1].values

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=101)

from sklearn.preprocessing import StandardScaler
sc_X = StandardScaler()
X_train = sc_X.fit_transform(X_train)
X_test = sc_X.transform(X_test)

from sklearn.neighbors import KNeighborsClassifier
classifier = KNeighborsClassifier(n_neighbors=5)
classifier.fit(X_train, y_train)

y_pred = classifier.predict(X_test)

from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_test, y_pred)

cm

from sklearn.metrics import classification_report
cl_report=classification_report(y_test,y_pred)
print(cl_report)

print("Accuracy Score for KNN : ", accuracy_score(y_pred,y_test))



//#SVM

from sklearn.model_selection import train_test_split

X = df.iloc[:, 1:-1].values
y = df.iloc[:, -1].values

X.shape

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=101)

from sklearn.svm import SVC
from sklearn.metrics import accuracy_score

svc = SVC(C=1.0,kernel='rbf',gamma='auto')        
svc.fit(X_train,y_train)
y_pred2 = svc.predict(X_test)

from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_test, y_pred2)

cm

print("Accuracy Score for SVC : ", accuracy_score(y_pred2,y_test))

from sklearn.metrics import classification_report
cl_report=classification_report(y_test,y_pred2)
print(cl_report)


